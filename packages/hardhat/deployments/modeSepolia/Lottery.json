{
  "address": "0x961Dd6A888ECB0Bb8c9754578aeD3B99EC2D77c2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lotteryDuration",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MANAGER_REWARD_PERCENTAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TICKET_PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "buyTicket",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "getMyTicketInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalPrizePool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalTickets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWinners",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lotteryDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lotteryStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pickWinner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "players",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tickets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "winners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6533362d499495692f7d543f02b7d9fa64a906334d3bb1d8bc917e541423634c",
  "receipt": {
    "to": null,
    "from": "0x4bBe485455c8A2d2Cb2748Eda58bD72Ea3831039",
    "contractAddress": "0x961Dd6A888ECB0Bb8c9754578aeD3B99EC2D77c2",
    "transactionIndex": 2,
    "gasUsed": "831614",
    "logsBloom": "0x
    "blockHash": "0x2a7ccde93c2af0edd567226d4ec9a9bbf19cb95935e55c46b024b4a5f9e9c86e",
    "transactionHash": "0x6533362d499495692f7d543f02b7d9fa64a906334d3bb1d8bc917e541423634c",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 12130570,
        "transactionHash": "0x6533362d499495692f7d543f02b7d9fa64a906334d3bb1d8bc917e541423634c",
        "address": "0x961Dd6A888ECB0Bb8c9754578aeD3B99EC2D77c2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004bbe485455c8a2d2cb2748eda58bd72ea3831039"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x2a7ccde93c2af0edd567226d4ec9a9bbf19cb95935e55c46b024b4a5f9e9c86e"
      }
    ],
    "blockNumber": 12130570,
    "cumulativeGasUsed": "897865",
    "status": 1,
    "byzantium": true
  },
  "args": [
    86400
  ],
  "numDeployments": 1,
  "solcInputHash": "14e087e6929dd808d1a570f33e57488c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MANAGER_REWARD_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TICKET_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyTicket\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getMyTicketInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalPrizePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pickWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lottery.sol\":\"Lottery\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/Lottery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ncontract Lottery is Ownable {\\n    using SafeMath for uint256;\\n\\n    mapping(address => uint256) public tickets;\\n    address[] public players;\\n    address[] public winners;\\n\\n    uint256 public lotteryStartTime;\\n    uint256 public lotteryDuration;\\n    uint256 public constant TICKET_PRICE = 0.001 ether;\\n    uint256 public constant MANAGER_REWARD_PERCENTAGE = 2; // 2% of the prize pool\\n\\n    constructor(\\n        uint256 _lotteryDuration\\n    ) Ownable() {\\n        lotteryStartTime = block.timestamp;\\n        lotteryDuration = _lotteryDuration;\\n\\n        tickets[msg.sender] = 1;\\n        players.push(msg.sender);\\n    }\\n\\n    function buyTicket(uint256 amount) public payable {\\n        require(amount >= TICKET_PRICE, \\\"You must send at least 0.001 ether\\\");\\n        uint256 numTickets = amount.div(TICKET_PRICE);\\n        tickets[msg.sender] = tickets[msg.sender].add(numTickets);\\n        players.push(msg.sender);\\n    }\\n\\n    function getTotalTickets() public view returns (uint256) {\\n        return players.length;\\n    }\\n\\n    function getMyTicketInfo(address player) public view returns (uint256, uint256) {\\n        uint256 numTickets = tickets[player];\\n        uint256 ticketValue = numTickets * TICKET_PRICE;\\n        return (numTickets, ticketValue);\\n    }\\n\\n    function getTotalPrizePool() public view returns (uint256) {\\n        return getTotalTickets() * TICKET_PRICE;\\n    }\\n\\n function pickWinner() public {\\n    require(block.timestamp >= lotteryStartTime + lotteryDuration, \\\"Lottery is still ongoing\\\");\\n    require(getTotalTickets() > 0, \\\"No tickets have been purchased yet\\\");\\n\\n    uint256 winningTicket = uint256(keccak256(abi.encodePacked(block.timestamp, msg.sender, players))) % getTotalTickets();\\n    address winner = players[winningTicket];\\n\\n    uint256 managerReward = getTotalPrizePool().mul(MANAGER_REWARD_PERCENTAGE).div(100);\\n    uint256 winnerReward = getTotalPrizePool().sub(managerReward);\\n\\n    (bool success) = payable(winner).send(winnerReward);\\n    require(success, \\\"Transfer to winner failed\\\");\\n\\n    success = payable(owner()).send(managerReward);\\n    require(success, \\\"Transfer to owner failed\\\");\\n\\n    emit WinnerPicked(winner, winnerReward);\\n\\n    while (players.length > 0) {\\n        players.pop();\\n    }\\n    players.push(msg.sender);\\n    winners.push(winner);\\n\\n    lotteryStartTime = block.timestamp;\\n}\\n\\n    function getWinners() public view returns (address[] memory) {\\n        return winners;\\n    }\\n\\n    event WinnerPicked(address indexed winner, uint256 reward);\\n}\",\"keccak256\":\"0x3e4312044305625a173aaefa2395d6ce0d4d38cf51ba783634f6d0fdc81603f2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610ca3380380610ca383398101604081905261002f916100e7565b61003833610097565b4260045560055533600081815260016020819052604082208190556002805491820181559091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319169091179055610100565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100f957600080fd5b5051919050565b610b948061010f6000396000f3fe6080604052600436106100f35760003560e01c8063845121921161008a578063a36b6aea11610059578063a36b6aea1461026a578063df15c37e14610280578063f2fde38b146102a2578063f71d96cb146102c257600080fd5b806384512192146101ce5780638c5c0d2d146102035780638da5cb5b14610218578063a2fb11751461024a57600080fd5b80635d495aea116100c65780635d495aea1461016257806367dd74ca146101795780636dcbf2a31461018c578063715018a6146101b957600080fd5b806306e8337f146100f8578063160a48b91461011c5780631a95f15f146101315780632d97902f1461014c575b600080fd5b34801561010457600080fd5b506002545b6040519081526020015b60405180910390f35b34801561012857600080fd5b506101096102e2565b34801561013d57600080fd5b5061010966038d7ea4c6800081565b34801561015857600080fd5b5061010960055481565b34801561016e57600080fd5b50610177610304565b005b6101776101873660046109a9565b610679565b34801561019857600080fd5b506101096101a73660046109c2565b60016020526000908152604090205481565b3480156101c557600080fd5b50610177610764565b3480156101da57600080fd5b506101ee6101e93660046109c2565b610778565b60408051928352602083019190915201610113565b34801561020f57600080fd5b50610109600281565b34801561022457600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610113565b34801561025657600080fd5b506102326102653660046109a9565b6107b1565b34801561027657600080fd5b5061010960045481565b34801561028c57600080fd5b506102956107db565b60405161011391906109f2565b3480156102ae57600080fd5b506101776102bd3660046109c2565b61083d565b3480156102ce57600080fd5b506102326102dd3660046109a9565b6108b6565b600066038d7ea4c680006102f560025490565b6102ff9190610a55565b905090565b6005546004546103149190610a6c565b4210156103685760405162461bcd60e51b815260206004820152601860248201527f4c6f7474657279206973207374696c6c206f6e676f696e67000000000000000060448201526064015b60405180910390fd5b600061037360025490565b116103cb5760405162461bcd60e51b815260206004820152602260248201527f4e6f207469636b6574732068617665206265656e207075726368617365642079604482015261195d60f21b606482015260840161035f565b60006103d660025490565b423360026040516020016103ec93929190610a7f565b6040516020818303038152906040528051906020012060001c61040f9190610af7565b905060006002828154811061042657610426610b0b565b60009182526020822001546001600160a01b0316915061045a6064610454600261044e6102e2565b906108c6565b906108db565b905060006104708261046a6102e2565b906108e7565b90506000836001600160a01b03166108fc839081150290604051600060405180830381858888f193505050509050806104eb5760405162461bcd60e51b815260206004820152601960248201527f5472616e7366657220746f2077696e6e6572206661696c656400000000000000604482015260640161035f565b600080546040516001600160a01b039091169185156108fc02918691818181858888f193505050509050806105625760405162461bcd60e51b815260206004820152601860248201527f5472616e7366657220746f206f776e6572206661696c65640000000000000000604482015260640161035f565b836001600160a01b03167f64791dbae5677392ba76761a5273633cec8f1d9d8cfe808da7bac6ef16a880be8360405161059d91815260200190565b60405180910390a25b600254156105e65760028054806105bf576105bf610b21565b600082815260209020810160001990810180546001600160a01b03191690550190556105a6565b50506002805460018082019092557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace018054336001600160a01b0319918216179091556003805492830181556000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b90910180549091166001600160a01b039390931692909217909155505042600455565b66038d7ea4c680008110156106db5760405162461bcd60e51b815260206004820152602260248201527f596f75206d7573742073656e64206174206c6561737420302e3030312065746860448201526132b960f11b606482015260840161035f565b60006106ee8266038d7ea4c680006108db565b3360009081526001602052604090205490915061070b90826108f3565b33600081815260016020819052604082209390935560028054938401815590527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90910180546001600160a01b03191690911790555050565b61076c6108ff565b6107766000610959565b565b6001600160a01b0381166000908152600160205260408120548190816107a566038d7ea4c6800083610a55565b91959194509092505050565b600381815481106107c157600080fd5b6000918252602090912001546001600160a01b0316905081565b6060600380548060200260200160405190810160405280929190818152602001828054801561083357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610815575b5050505050905090565b6108456108ff565b6001600160a01b0381166108aa5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161035f565b6108b381610959565b50565b600281815481106107c157600080fd5b60006108d28284610a55565b90505b92915050565b60006108d28284610b37565b60006108d28284610b4b565b60006108d28284610a6c565b6000546001600160a01b031633146107765760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161035f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156109bb57600080fd5b5035919050565b6000602082840312156109d457600080fd5b81356001600160a01b03811681146109eb57600080fd5b9392505050565b6020808252825182820181905260009190848201906040850190845b81811015610a335783516001600160a01b031683529284019291840191600101610a0e565b50909695505050505050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176108d5576108d5610a3f565b808201808211156108d5576108d5610a3f565b838152600060206bffffffffffffffffffffffff198560601b1681840152603483018454856000528260002060005b82811015610ad35781546001600160a01b031684529284019260019182019101610aae565b509198975050505050505050565b634e487b7160e01b600052601260045260246000fd5b600082610b0657610b06610ae1565b500690565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b600082610b4657610b46610ae1565b500490565b818103818111156108d5576108d5610a3f56fea264697066735822122063e5ebce6d80a6b4c4e15518d610523619d1ff1338510ecf50de4c6af9ad576964736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100f35760003560e01c8063845121921161008a578063a36b6aea11610059578063a36b6aea1461026a578063df15c37e14610280578063f2fde38b146102a2578063f71d96cb146102c257600080fd5b806384512192146101ce5780638c5c0d2d146102035780638da5cb5b14610218578063a2fb11751461024a57600080fd5b80635d495aea116100c65780635d495aea1461016257806367dd74ca146101795780636dcbf2a31461018c578063715018a6146101b957600080fd5b806306e8337f146100f8578063160a48b91461011c5780631a95f15f146101315780632d97902f1461014c575b600080fd5b34801561010457600080fd5b506002545b6040519081526020015b60405180910390f35b34801561012857600080fd5b506101096102e2565b34801561013d57600080fd5b5061010966038d7ea4c6800081565b34801561015857600080fd5b5061010960055481565b34801561016e57600080fd5b50610177610304565b005b6101776101873660046109a9565b610679565b34801561019857600080fd5b506101096101a73660046109c2565b60016020526000908152604090205481565b3480156101c557600080fd5b50610177610764565b3480156101da57600080fd5b506101ee6101e93660046109c2565b610778565b60408051928352602083019190915201610113565b34801561020f57600080fd5b50610109600281565b34801561022457600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610113565b34801561025657600080fd5b506102326102653660046109a9565b6107b1565b34801561027657600080fd5b5061010960045481565b34801561028c57600080fd5b506102956107db565b60405161011391906109f2565b3480156102ae57600080fd5b506101776102bd3660046109c2565b61083d565b3480156102ce57600080fd5b506102326102dd3660046109a9565b6108b6565b600066038d7ea4c680006102f560025490565b6102ff9190610a55565b905090565b6005546004546103149190610a6c565b4210156103685760405162461bcd60e51b815260206004820152601860248201527f4c6f7474657279206973207374696c6c206f6e676f696e67000000000000000060448201526064015b60405180910390fd5b600061037360025490565b116103cb5760405162461bcd60e51b815260206004820152602260248201527f4e6f207469636b6574732068617665206265656e207075726368617365642079604482015261195d60f21b606482015260840161035f565b60006103d660025490565b423360026040516020016103ec93929190610a7f565b6040516020818303038152906040528051906020012060001c61040f9190610af7565b905060006002828154811061042657610426610b0b565b60009182526020822001546001600160a01b0316915061045a6064610454600261044e6102e2565b906108c6565b906108db565b905060006104708261046a6102e2565b906108e7565b90506000836001600160a01b03166108fc839081150290604051600060405180830381858888f193505050509050806104eb5760405162461bcd60e51b815260206004820152601960248201527f5472616e7366657220746f2077696e6e6572206661696c656400000000000000604482015260640161035f565b600080546040516001600160a01b039091169185156108fc02918691818181858888f193505050509050806105625760405162461bcd60e51b815260206004820152601860248201527f5472616e7366657220746f206f776e6572206661696c65640000000000000000604482015260640161035f565b836001600160a01b03167f64791dbae5677392ba76761a5273633cec8f1d9d8cfe808da7bac6ef16a880be8360405161059d91815260200190565b60405180910390a25b600254156105e65760028054806105bf576105bf610b21565b600082815260209020810160001990810180546001600160a01b03191690550190556105a6565b50506002805460018082019092557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace018054336001600160a01b0319918216179091556003805492830181556000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b90910180549091166001600160a01b039390931692909217909155505042600455565b66038d7ea4c680008110156106db5760405162461bcd60e51b815260206004820152602260248201527f596f75206d7573742073656e64206174206c6561737420302e3030312065746860448201526132b960f11b606482015260840161035f565b60006106ee8266038d7ea4c680006108db565b3360009081526001602052604090205490915061070b90826108f3565b33600081815260016020819052604082209390935560028054938401815590527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90910180546001600160a01b03191690911790555050565b61076c6108ff565b6107766000610959565b565b6001600160a01b0381166000908152600160205260408120548190816107a566038d7ea4c6800083610a55565b91959194509092505050565b600381815481106107c157600080fd5b6000918252602090912001546001600160a01b0316905081565b6060600380548060200260200160405190810160405280929190818152602001828054801561083357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610815575b5050505050905090565b6108456108ff565b6001600160a01b0381166108aa5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161035f565b6108b381610959565b50565b600281815481106107c157600080fd5b60006108d28284610a55565b90505b92915050565b60006108d28284610b37565b60006108d28284610b4b565b60006108d28284610a6c565b6000546001600160a01b031633146107765760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161035f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156109bb57600080fd5b5035919050565b6000602082840312156109d457600080fd5b81356001600160a01b03811681146109eb57600080fd5b9392505050565b6020808252825182820181905260009190848201906040850190845b81811015610a335783516001600160a01b031683529284019291840191600101610a0e565b50909695505050505050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176108d5576108d5610a3f565b808201808211156108d5576108d5610a3f565b838152600060206bffffffffffffffffffffffff198560601b1681840152603483018454856000528260002060005b82811015610ad35781546001600160a01b031684529284019260019182019101610aae565b509198975050505050505050565b634e487b7160e01b600052601260045260246000fd5b600082610b0657610b06610ae1565b500690565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b600082610b4657610b46610ae1565b500490565b818103818111156108d5576108d5610a3f56fea264697066735822122063e5ebce6d80a6b4c4e15518d610523619d1ff1338510ecf50de4c6af9ad576964736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 459,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "tickets",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 462,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "players",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 465,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "winners",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 467,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "lotteryStartTime",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 469,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "lotteryDuration",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}