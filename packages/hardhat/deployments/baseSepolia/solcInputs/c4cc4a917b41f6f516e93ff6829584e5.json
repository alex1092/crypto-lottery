{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/LotteryContract.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nerror MinimumEntryFeeNotMet();\nerror CooldownPeriodNotOver();\nerror NoPlayersInLottery();\nerror NoWinningsToWithdraw();\nerror WithdrawFailed();\nerror OnlyWinningPlayerCanClaim();\n\ncontract LotteryContract is Ownable, ReentrancyGuard {\n\tstruct Player {\n\t\tuint256 amount;\n\t}\n\n\tmapping(address => uint256) public winnings;\n\tmapping(address => Player) public players;\n\taddress payable[] public playerAddresses;\n\taddress payable public winningPlayer;\n\tuint256 public immutable MANAGER_PERCENTAGE;\n\tuint256 public immutable MINIMUM_ENTRY_FEE;\n\tuint256 public lastDrawTimestamp;\n\tuint256 public cooldownPeriod;\n\n\tevent TicketPurchased(address indexed player, uint256 amount);\n\tevent WinnerPicked(address indexed winner, uint256 amount);\n\tevent WinningsClaimed(address indexed winner, uint256 amount);\n\n\tconstructor() {\n\t\tMANAGER_PERCENTAGE = 5;\n\t\tMINIMUM_ENTRY_FEE = 0.001 ether;\n\t\tlastDrawTimestamp = block.timestamp;\n\t\tcooldownPeriod = 1 days;\n\t}\n\n\tfunction enter() external payable {\n\t\tif (msg.value < MINIMUM_ENTRY_FEE) revert MinimumEntryFeeNotMet();\n\t\tif (players[msg.sender].amount == 0) {\n\t\t\tplayerAddresses.push(payable(msg.sender));\n\t\t}\n\t\tplayers[msg.sender].amount += msg.value;\n\t\temit TicketPurchased(msg.sender, msg.value);\n\t}\n\n\tfunction pickWinner() external onlyOwner {\n\t\t// Check if the cooldown period is over and if there are players in the lottery\n\t\tif (block.timestamp < lastDrawTimestamp + cooldownPeriod)\n\t\t\trevert CooldownPeriodNotOver();\n\t\tif (playerAddresses.length == 0) revert NoPlayersInLottery();\n\n\t\t// Calculate the total amount of all entries\n\t\tuint256 totalAmount = 0;\n\t\tfor (uint256 i = 0; i < playerAddresses.length; i++) {\n\t\t\ttotalAmount += players[playerAddresses[i]].amount;\n\t\t}\n\n\t\t// Update the last draw timestamp\n\t\tlastDrawTimestamp = block.timestamp;\n\n\t\t// Generate a pseudo-random number based on block attributes\n\t\tuint256 random = uint256(\n\t\t\tkeccak256(\n\t\t\t\tabi.encodePacked(\n\t\t\t\t\tblock.difficulty,\n\t\t\t\t\tblock.timestamp,\n\t\t\t\t\tplayerAddresses\n\t\t\t\t)\n\t\t\t)\n\t\t);\n\n\t\t// Use the random number to select a winner based on their proportion of the total amount\n\t\tuint256 winningTicket = random % totalAmount;\n\t\tuint256 runningTotal = 0;\n\t\taddress payable winner;\n\n\t\tfor (uint256 i = 0; i < playerAddresses.length; i++) {\n\t\t\trunningTotal += players[playerAddresses[i]].amount;\n\t\t\tif (runningTotal >= winningTicket) {\n\t\t\t\twinner = playerAddresses[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// Calculate winnings and manager's cut\n\t\tuint256 managerCut = (totalAmount * MANAGER_PERCENTAGE) / 100;\n\t\tuint256 winningsAmount = totalAmount - managerCut;\n\n\t\t// Update contract state\n\t\twinnings[winner] += winningsAmount;\n\t\tpayable(owner()).transfer(managerCut);\n\t\temit WinnerPicked(winner, winningsAmount);\n\n\t\t// Reset the lottery for the next round\n\t\tfor (uint256 i = 0; i < playerAddresses.length; i++) {\n\t\t\tplayers[playerAddresses[i]].amount = 0;\n\t\t}\n\t\tplayerAddresses = new address payable[](0);\n\t}\n\n\tfunction withdrawWinnings() external nonReentrant {\n\t\tuint256 amount = winnings[msg.sender];\n\t\tif (amount == 0) revert NoWinningsToWithdraw();\n\t\twinnings[msg.sender] = 0;\n\t\t(bool success, ) = msg.sender.call{ value: amount }(\"\");\n\t\tif (!success) revert WithdrawFailed();\n\t\temit WinningsClaimed(msg.sender, amount);\n\t}\n\n\tfunction claimWinnings() external nonReentrant {\n\t\trequire(\n\t\t\tmsg.sender == winningPlayer,\n\t\t\t\"Only the winning player can claim the prize\"\n\t\t);\n\t\tuint256 winningAmount = players[msg.sender].amount;\n\t\trequire(winningAmount > 0, \"No winnings to claim\");\n\n\t\t(bool success, ) = payable(msg.sender).call{ value: winningAmount }(\"\");\n\t\trequire(success, \"Transfer failed.\");\n\t\tplayers[msg.sender].amount = 0;\n\t\temit WinningsClaimed(msg.sender, winningAmount);\n\t}\n\n\tfunction getPlayers() public view returns (address payable[] memory) {\n\t\treturn playerAddresses;\n\t}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}