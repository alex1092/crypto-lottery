{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/Lottery.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\ncontract Lottery is Ownable {\n\tusing SafeMath for uint256;\n\n\tmapping(address => uint256) public pendingWithdrawals;\n\tmapping(address => uint256) public tickets;\n\n\taddress[] public players;\n\tuint256 public constant MAX_WINNERS_DISPLAYED = 10;\n\taddress[] private cachedWinners;\n\tuint256 public totalPendingWithdrawals;\n\tbool public isLotteryActive;\n\tuint256 public lotteryStartTime;\n\tuint256 public lotteryDuration;\n\tuint256 public constant TICKET_PRICE = 0.001 ether;\n\tuint256 public constant MANAGER_REWARD_PERCENTAGE = 2;\n\tuint256 public totalTickets;\n\n\tconstructor(uint256 _lotteryDuration) payable Ownable() {\n\t\tlotteryStartTime = block.timestamp;\n\t\tlotteryDuration = _lotteryDuration;\n\n\t\ttickets[owner()] = 1;\n\t\tplayers.push(owner());\n\t\ttotalTickets = 1;\n\n\t\temit LotteryStarted(block.timestamp, _lotteryDuration);\n\t}\n\n\tfunction buyTicket(uint256 amount) public payable {\n\t\trequire(amount >= TICKET_PRICE, \"You must send at least 0.001 ether\");\n\t\tuint256 numTickets = amount.div(TICKET_PRICE);\n\t\ttickets[msg.sender] = tickets[msg.sender].add(numTickets);\n\t\tplayers.push(msg.sender);\n\t\ttotalTickets = totalTickets.add(numTickets);\n\n\t\temit TicketBought(msg.sender, numTickets);\n\t}\n\n\tfunction getTotalTickets() public view returns (uint256) {\n\t\treturn players.length;\n\t}\n\n\tfunction getMyTicketInfo(address player) public view returns (uint256) {\n\t\treturn tickets[player];\n\t}\n\n\tfunction getTotalPrizePool() public view returns (uint256) {\n\t\treturn getTotalTickets() * TICKET_PRICE;\n\t}\n\n\tfunction pickWinner() public onlyOwner {\n\t\trequire(\n\t\t\tblock.timestamp >= lotteryStartTime + lotteryDuration,\n\t\t\t\"Lottery is still ongoing\"\n\t\t);\n\t\trequire(getTotalTickets() > 0, \"No tickets have been purchased yet\");\n\n\t\tuint256 randomNumber = _getRandomNumber();\n\t\tuint256 winningTicket = randomNumber % getTotalTickets();\n\t\trequire(\n\t\t\twinningTicket < players.length,\n\t\t\t\"Winning ticket index is out of bounds\"\n\t\t);\n\t\taddress winner = players[winningTicket];\n\n\t\tuint256 totalPrizePool = getTotalPrizePool();\n\t\tuint256 managerReward = totalPrizePool\n\t\t\t.mul(MANAGER_REWARD_PERCENTAGE)\n\t\t\t.div(100);\n\t\tuint256 winnerReward = totalPrizePool.sub(managerReward);\n\n\t\t(bool successToWinner, ) = payable(winner).call{ value: winnerReward }(\n\t\t\t\"\"\n\t\t);\n\t\trequire(successToWinner, \"Transfer to winner failed\");\n\n\t\t(bool successToOwner, ) = payable(owner()).call{ value: managerReward }(\n\t\t\t\"\"\n\t\t);\n\t\trequire(successToOwner, \"Transfer to owner failed\");\n\n\t\tcachedWinners.push(winner);\n\t\tupdateWinners();\n\n\t\tpendingWithdrawals[winner] = winnerReward;\n\t\tpendingWithdrawals[owner()] = managerReward;\n\n\t\temit WinnerPicked(winner, winnerReward);\n\n\t\tresetLottery();\n\t}\n\n\tfunction _getRandomNumber() private view returns (uint256) {\n\t\treturn\n\t\t\tuint256(\n\t\t\t\tkeccak256(\n\t\t\t\t\tabi.encodePacked(block.timestamp, msg.sender, players)\n\t\t\t\t)\n\t\t\t);\n\t}\n\n\tfunction getWinners() public view returns (address[] memory) {\n\t\treturn cachedWinners;\n\t}\n\n\tfunction withdraw() public {\n\t\tuint256 amount = pendingWithdrawals[msg.sender];\n\t\trequire(amount > 0, \"No funds to withdraw\");\n\t\ttotalPendingWithdrawals -= amount;\n\t\tpendingWithdrawals[msg.sender] = 0;\n\t\tpayable(msg.sender).transfer(amount);\n\t}\n\n\tfunction resetLottery() private {\n\t\twhile (players.length > 0) {\n\t\t\tplayers.pop();\n\t\t}\n\t\tupdateWinners();\n\t\tlotteryStartTime = block.timestamp;\n\n\t\temit LotteryReset(block.timestamp);\n\t}\n\n\tfunction updateWinners() private {\n\t\t// Clear the cachedWinners array\n\t\twhile (cachedWinners.length > 0) {\n\t\t\tcachedWinners.pop();\n\t\t}\n\n\t\t// Add the top winners to the cachedWinners array\n\t\tuint256 numWinners = players.length > MAX_WINNERS_DISPLAYED\n\t\t\t? MAX_WINNERS_DISPLAYED\n\t\t\t: players.length;\n\t\tfor (uint256 i = 0; i < numWinners; i++) {\n\t\t\tcachedWinners.push(players[i]);\n\t\t}\n\t}\n\n\tfunction startLottery() public onlyOwner {\n\t\tisLotteryActive = true;\n\t\temit LotteryStarted(block.timestamp, lotteryDuration);\n\t}\n\n\tfunction pauseLottery() public onlyOwner {\n\t\tisLotteryActive = false;\n\t\temit LotteryPaused(block.timestamp);\n\t}\n\n\tevent LotteryStarted(uint256 startTime, uint256 duration);\n\tevent LotteryPaused(uint256 pauseTime);\n\tevent TicketBought(address indexed buyer, uint256 numTickets);\n\tevent LotteryReset(uint256 resetTime);\n\tevent WinnerPicked(address indexed winner, uint256 reward);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}