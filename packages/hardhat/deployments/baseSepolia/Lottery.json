{
  "address": "0x168c318Be04a15673a2Eac04A14c093b9F536A4E",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "enter",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPlayers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalTickets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWinners",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pickWinner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "players",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tickets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "winners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8712cec0884f00af6e5f4ac0f179db97afdafb7d44b96112ecfbef09df3d9407",
  "receipt": {
    "to": null,
    "from": "0x4bBe485455c8A2d2Cb2748Eda58bD72Ea3831039",
    "contractAddress": "0x168c318Be04a15673a2Eac04A14c093b9F536A4E",
    "transactionIndex": 2,
    "gasUsed": "731300",
    "logsBloom": "0x
    "blockHash": "0x6674f3bfcec2c90ae17d86e9b875772447ada8e596059c8553a1206ac5ad5eb2",
    "transactionHash": "0x8712cec0884f00af6e5f4ac0f179db97afdafb7d44b96112ecfbef09df3d9407",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 8069208,
        "transactionHash": "0x8712cec0884f00af6e5f4ac0f179db97afdafb7d44b96112ecfbef09df3d9407",
        "address": "0x168c318Be04a15673a2Eac04A14c093b9F536A4E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004bbe485455c8a2d2cb2748eda58bd72ea3831039"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x6674f3bfcec2c90ae17d86e9b875772447ada8e596059c8553a1206ac5ad5eb2"
      }
    ],
    "blockNumber": 8069208,
    "cumulativeGasUsed": "796651",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 11,
  "solcInputHash": "65e74abb7b0a3df7396825e77bb93142",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"enter\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pickWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lottery.sol\":\"Lottery\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/Lottery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ncontract Lottery is Ownable {\\n    using SafeMath for uint256;\\n\\n    mapping(address => uint256) public tickets;\\n    address[] public players;\\n    address[] public winners;\\n\\n    constructor() Ownable() {\\n        // Add the contract owner as the first player with 1 ticket\\n        tickets[msg.sender] = 1;\\n        players.push(msg.sender);\\n    }\\n\\n    function enter() public payable {\\n        // Calculate the number of tickets based on the sent Ether\\n        uint256 numTickets = msg.value / 0.001 ether;\\n        require(numTickets > 0, \\\"You must send at least 0.001 ether\\\");\\n\\n        // Add the player and their tickets to the mapping and players array\\n        tickets[msg.sender] += numTickets;\\n        players.push(msg.sender);\\n    }\\n\\n    function getPlayers() public view returns (address[] memory) {\\n        return players;\\n    }\\n\\n    function random() private view returns (uint) {\\n        // Use the total number of tickets as part of the random seed\\n        return uint(keccak256(abi.encodePacked(block.difficulty, block.timestamp, players.length, getTotalTickets())));\\n    }\\n\\n    function getTotalTickets() public view returns (uint256) {\\n        uint256 total = 0;\\n        for (uint256 i = 0; i < players.length; i++) {\\n            total += tickets[players[i]];\\n        }\\n        return total;\\n    }\\n\\n    function pickWinner() public onlyOwner {\\n        require(getTotalTickets() > 0, \\\"No tickets have been purchased yet\\\");\\n\\n        uint256 totalTickets = getTotalTickets();\\n        uint256 winningTicket = random() % totalTickets;\\n\\n        uint256 currentTicket = 0;\\n        address winner;\\n        uint256 winnerReward;\\n        uint256 managerReward;\\n\\n        for (uint256 i = 0; i < players.length; i++) {\\n            currentTicket = currentTicket.add(tickets[players[i]]);\\n            if (currentTicket > winningTicket) {\\n                winner = players[i];\\n                break;\\n            }\\n        }\\n\\n        managerReward = address(this).balance / 50;\\n        winnerReward = address(this).balance - managerReward;\\n\\n        (bool success) = payable(winner).send(winnerReward);\\n        require(success, \\\"Transfer to winner failed\\\");\\n\\n        success = payable(owner()).send(managerReward);\\n        require(success, \\\"Transfer to owner failed\\\");\\n\\n        emit WinnerPicked(winner, winnerReward);\\n\\n        delete players;\\n        players.push(msg.sender);\\n        winners.push(winner);\\n    }\\n\\n    function getWinners() public view returns (address[] memory) {\\n        return winners;\\n    }\\n\\n    event WinnerPicked(address winner, uint256 reward);\\n}\",\"keccak256\":\"0xd60d43b8a75df7a09373207461e513ffb0925d7be7fa2f9396f0dba3adb3636c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a33610072565b33600081815260016020819052604082208190556002805491820181559091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b03191690911790556100c2565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610a96806100d16000396000f3fe60806040526004361061009c5760003560e01c80638da5cb5b116100645780638da5cb5b14610144578063a2fb117514610176578063df15c37e14610196578063e97dcb62146101ab578063f2fde38b146101b3578063f71d96cb146101d357600080fd5b806306e8337f146100a15780635d495aea146100c95780636dcbf2a3146100e0578063715018a61461010d5780638b5b9ccc14610122575b600080fd5b3480156100ad57600080fd5b506100b66101f3565b6040519081526020015b60405180910390f35b3480156100d557600080fd5b506100de610262565b005b3480156100ec57600080fd5b506100b66100fb366004610921565b60016020526000908152604090205481565b34801561011957600080fd5b506100de61057f565b34801561012e57600080fd5b50610137610593565b6040516100c09190610951565b34801561015057600080fd5b506000546001600160a01b03165b6040516001600160a01b0390911681526020016100c0565b34801561018257600080fd5b5061015e61019136600461099e565b6105f5565b3480156101a257600080fd5b5061013761061f565b6100de61067f565b3480156101bf57600080fd5b506100de6101ce366004610921565b610758565b3480156101df57600080fd5b5061015e6101ee36600461099e565b6107d1565b600080805b60025481101561025c576001600060028381548110610219576102196109b7565b60009182526020808320909101546001600160a01b0316835282019290925260400190205461024890836109e3565b915080610254816109f6565b9150506101f8565b50919050565b61026a6107e1565b60006102746101f3565b116102d15760405162461bcd60e51b815260206004820152602260248201527f4e6f207469636b6574732068617665206265656e207075726368617365642079604482015261195d60f21b60648201526084015b60405180910390fd5b60006102db6101f3565b90506000816102e861083b565b6102f29190610a25565b90506000808080805b6002548110156103965761034b600160006002848154811061031f5761031f6109b7565b60009182526020808320909101546001600160a01b03168352820192909252604001902054869061088a565b9450858511156103845760028181548110610368576103686109b7565b6000918252602090912001546001600160a01b03169350610396565b8061038e816109f6565b9150506102fb565b506103a2603247610a39565b90506103ae8147610a4d565b91506000836001600160a01b03166108fc849081150290604051600060405180830381858888f193505050509050806104295760405162461bcd60e51b815260206004820152601960248201527f5472616e7366657220746f2077696e6e6572206661696c65640000000000000060448201526064016102c8565b600080546040516001600160a01b039091169184156108fc02918591818181858888f193505050509050806104a05760405162461bcd60e51b815260206004820152601860248201527f5472616e7366657220746f206f776e6572206661696c6564000000000000000060448201526064016102c8565b604080516001600160a01b0386168152602081018590527f64791dbae5677392ba76761a5273633cec8f1d9d8cfe808da7bac6ef16a880be910160405180910390a16104ee600260006108ef565b50506002805460018082019092557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace018054336001600160a01b0319918216179091556003805492830181556000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b90910180549091166001600160a01b03939093169290921790915550505050565b6105876107e1565b610591600061089f565b565b606060028054806020026020016040519081016040528092919081815260200182805480156105eb57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116105cd575b5050505050905090565b6003818154811061060557600080fd5b6000918252602090912001546001600160a01b0316905081565b606060038054806020026020016040519081016040528092919081815260200182805480156105eb576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116105cd575050505050905090565b600061069266038d7ea4c6800034610a39565b9050600081116106ef5760405162461bcd60e51b815260206004820152602260248201527f596f75206d7573742073656e64206174206c6561737420302e3030312065746860448201526132b960f11b60648201526084016102c8565b336000908152600160205260408120805483929061070e9084906109e3565b9091555050600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319163317905550565b6107606107e1565b6001600160a01b0381166107c55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102c8565b6107ce8161089f565b50565b6002818154811061060557600080fd5b6000546001600160a01b031633146105915760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102c8565b6000444260028054905061084d6101f3565b6040805160208101959095528401929092526060830152608082015260a0016040516020818303038152906040528051906020012060001c905090565b600061089682846109e3565b90505b92915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b50805460008255906000526020600020908101906107ce91905b8082111561091d5760008155600101610909565b5090565b60006020828403121561093357600080fd5b81356001600160a01b038116811461094a57600080fd5b9392505050565b6020808252825182820181905260009190848201906040850190845b818110156109925783516001600160a01b03168352928401929184019160010161096d565b50909695505050505050565b6000602082840312156109b057600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115610899576108996109cd565b600060018201610a0857610a086109cd565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082610a3457610a34610a0f565b500690565b600082610a4857610a48610a0f565b500490565b81810381811115610899576108996109cd56fea2646970667358221220c2c2caf1c7a7754ed6e5859612577691fda5337ed35f412b6b72d7c27e17086e64736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061009c5760003560e01c80638da5cb5b116100645780638da5cb5b14610144578063a2fb117514610176578063df15c37e14610196578063e97dcb62146101ab578063f2fde38b146101b3578063f71d96cb146101d357600080fd5b806306e8337f146100a15780635d495aea146100c95780636dcbf2a3146100e0578063715018a61461010d5780638b5b9ccc14610122575b600080fd5b3480156100ad57600080fd5b506100b66101f3565b6040519081526020015b60405180910390f35b3480156100d557600080fd5b506100de610262565b005b3480156100ec57600080fd5b506100b66100fb366004610921565b60016020526000908152604090205481565b34801561011957600080fd5b506100de61057f565b34801561012e57600080fd5b50610137610593565b6040516100c09190610951565b34801561015057600080fd5b506000546001600160a01b03165b6040516001600160a01b0390911681526020016100c0565b34801561018257600080fd5b5061015e61019136600461099e565b6105f5565b3480156101a257600080fd5b5061013761061f565b6100de61067f565b3480156101bf57600080fd5b506100de6101ce366004610921565b610758565b3480156101df57600080fd5b5061015e6101ee36600461099e565b6107d1565b600080805b60025481101561025c576001600060028381548110610219576102196109b7565b60009182526020808320909101546001600160a01b0316835282019290925260400190205461024890836109e3565b915080610254816109f6565b9150506101f8565b50919050565b61026a6107e1565b60006102746101f3565b116102d15760405162461bcd60e51b815260206004820152602260248201527f4e6f207469636b6574732068617665206265656e207075726368617365642079604482015261195d60f21b60648201526084015b60405180910390fd5b60006102db6101f3565b90506000816102e861083b565b6102f29190610a25565b90506000808080805b6002548110156103965761034b600160006002848154811061031f5761031f6109b7565b60009182526020808320909101546001600160a01b03168352820192909252604001902054869061088a565b9450858511156103845760028181548110610368576103686109b7565b6000918252602090912001546001600160a01b03169350610396565b8061038e816109f6565b9150506102fb565b506103a2603247610a39565b90506103ae8147610a4d565b91506000836001600160a01b03166108fc849081150290604051600060405180830381858888f193505050509050806104295760405162461bcd60e51b815260206004820152601960248201527f5472616e7366657220746f2077696e6e6572206661696c65640000000000000060448201526064016102c8565b600080546040516001600160a01b039091169184156108fc02918591818181858888f193505050509050806104a05760405162461bcd60e51b815260206004820152601860248201527f5472616e7366657220746f206f776e6572206661696c6564000000000000000060448201526064016102c8565b604080516001600160a01b0386168152602081018590527f64791dbae5677392ba76761a5273633cec8f1d9d8cfe808da7bac6ef16a880be910160405180910390a16104ee600260006108ef565b50506002805460018082019092557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace018054336001600160a01b0319918216179091556003805492830181556000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b90910180549091166001600160a01b03939093169290921790915550505050565b6105876107e1565b610591600061089f565b565b606060028054806020026020016040519081016040528092919081815260200182805480156105eb57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116105cd575b5050505050905090565b6003818154811061060557600080fd5b6000918252602090912001546001600160a01b0316905081565b606060038054806020026020016040519081016040528092919081815260200182805480156105eb576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116105cd575050505050905090565b600061069266038d7ea4c6800034610a39565b9050600081116106ef5760405162461bcd60e51b815260206004820152602260248201527f596f75206d7573742073656e64206174206c6561737420302e3030312065746860448201526132b960f11b60648201526084016102c8565b336000908152600160205260408120805483929061070e9084906109e3565b9091555050600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319163317905550565b6107606107e1565b6001600160a01b0381166107c55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102c8565b6107ce8161089f565b50565b6002818154811061060557600080fd5b6000546001600160a01b031633146105915760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102c8565b6000444260028054905061084d6101f3565b6040805160208101959095528401929092526060830152608082015260a0016040516020818303038152906040528051906020012060001c905090565b600061089682846109e3565b90505b92915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b50805460008255906000526020600020908101906107ce91905b8082111561091d5760008155600101610909565b5090565b60006020828403121561093357600080fd5b81356001600160a01b038116811461094a57600080fd5b9392505050565b6020808252825182820181905260009190848201906040850190845b818110156109925783516001600160a01b03168352928401929184019160010161096d565b50909695505050505050565b6000602082840312156109b057600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115610899576108996109cd565b600060018201610a0857610a086109cd565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082610a3457610a34610a0f565b500690565b600082610a4857610a48610a0f565b500490565b81810381811115610899576108996109cd56fea2646970667358221220c2c2caf1c7a7754ed6e5859612577691fda5337ed35f412b6b72d7c27e17086e64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 459,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "tickets",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 462,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "players",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 465,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "winners",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}