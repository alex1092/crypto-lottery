{
  "address": "0x9D74e731d553280a3D0Cb988355f555C4eeb99Ee",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "enter",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMyTicketValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMyTickets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPlayers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalPrizePool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalTickets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWinners",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pickWinner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "players",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tickets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "winners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x322bd44a4fd234b62e327b522ac26463642ae9e875d9c5ab4b48baa689d0d043",
  "receipt": {
    "to": null,
    "from": "0x4bBe485455c8A2d2Cb2748Eda58bD72Ea3831039",
    "contractAddress": "0x9D74e731d553280a3D0Cb988355f555C4eeb99Ee",
    "transactionIndex": 1,
    "gasUsed": "780774",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000001100000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000400000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000200000000",
    "blockHash": "0xd327b577702af6d707a6d1b6637803243fd9ad67b0ad778bb0a9fd04c9ddaab7",
    "transactionHash": "0x322bd44a4fd234b62e327b522ac26463642ae9e875d9c5ab4b48baa689d0d043",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 8094701,
        "transactionHash": "0x322bd44a4fd234b62e327b522ac26463642ae9e875d9c5ab4b48baa689d0d043",
        "address": "0x9D74e731d553280a3D0Cb988355f555C4eeb99Ee",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004bbe485455c8a2d2cb2748eda58bd72ea3831039"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xd327b577702af6d707a6d1b6637803243fd9ad67b0ad778bb0a9fd04c9ddaab7"
      }
    ],
    "blockNumber": 8094701,
    "cumulativeGasUsed": "824625",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 12,
  "solcInputHash": "0cf0336dc281221ab542eed93f364bb0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"enter\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyTicketValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalPrizePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pickWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lottery.sol\":\"Lottery\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/Lottery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ncontract Lottery is Ownable {\\n    using SafeMath for uint256;\\n\\n    mapping(address => uint256) public tickets;\\n    address[] public players;\\n    address[] public winners;\\n\\n    constructor() Ownable() {\\n        tickets[msg.sender] = 1;\\n        players.push(msg.sender);\\n    }\\n\\n    function enter() public payable {\\n        uint256 numTickets = msg.value / 0.001 ether;\\n        require(numTickets > 0, \\\"You must send at least 0.001 ether\\\");\\n\\n        tickets[msg.sender] += numTickets;\\n        players.push(msg.sender);\\n    }\\n\\n    function getPlayers() public view returns (address[] memory) {\\n        return players;\\n    }\\n\\n    function random() private view returns (uint) {\\n        return uint(keccak256(abi.encodePacked(block.difficulty, block.timestamp, players.length, getTotalTickets())));\\n    }\\n\\n    function getTotalTickets() public view returns (uint256) {\\n        uint256 total = 0;\\n        for (uint256 i = 0; i < players.length; i++) {\\n            total += tickets[players[i]];\\n        }\\n        return total;\\n    }\\n\\n    function getMyTickets() public view returns (uint256) {\\n        return tickets[msg.sender];\\n    }\\n\\n    function getMyTicketValue() public view returns (uint256) {\\n        return tickets[msg.sender] * 0.001 ether;\\n    }\\n\\n    function getTotalPrizePool() public view returns (uint256) {\\n        return getTotalTickets() * 0.001 ether;\\n    }\\n\\n    function pickWinner() public onlyOwner {\\n        require(getTotalTickets() > 0, \\\"No tickets have been purchased yet\\\");\\n\\n        uint256 totalTickets = getTotalTickets();\\n        uint256 winningTicket = random() % totalTickets;\\n\\n        uint256 currentTicket = 0;\\n        address winner;\\n        uint256 winnerReward;\\n        uint256 managerReward;\\n\\n        for (uint256 i = 0; i < players.length; i++) {\\n            currentTicket = currentTicket.add(tickets[players[i]]);\\n            if (currentTicket > winningTicket) {\\n                winner = players[i];\\n                break;\\n            }\\n        }\\n\\n        managerReward = address(this).balance / 50;\\n        winnerReward = address(this).balance - managerReward;\\n\\n        (bool success) = payable(winner).send(winnerReward);\\n        require(success, \\\"Transfer to winner failed\\\");\\n\\n        success = payable(owner()).send(managerReward);\\n        require(success, \\\"Transfer to owner failed\\\");\\n\\n        emit WinnerPicked(winner, winnerReward);\\n\\n        delete players;\\n        players.push(msg.sender);\\n        winners.push(winner);\\n    }\\n\\n    function getWinners() public view returns (address[] memory) {\\n        return winners;\\n    }\\n\\n    event WinnerPicked(address winner, uint256 reward);\\n}\",\"keccak256\":\"0xd09e240aaf2f81d352e575b36a955190a35fef9749c9605b4f521d791abbc42c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a33610072565b33600081815260016020819052604082208190556002805491820181559091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b03191690911790556100c2565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610b7b806100d16000396000f3fe6080604052600436106100dd5760003560e01c80638da5cb5b1161007f578063e1d10d8511610059578063e1d10d8514610216578063e97dcb6214610238578063f2fde38b14610240578063f71d96cb1461026057600080fd5b80638da5cb5b146101af578063a2fb1175146101e1578063df15c37e1461020157600080fd5b80635d495aea116100bb5780635d495aea146101345780636dcbf2a31461014b578063715018a6146101785780638b5b9ccc1461018d57600080fd5b806306e8337f146100e2578063160a48b91461010a578063289c8cfd1461011f575b600080fd5b3480156100ee57600080fd5b506100f7610280565b6040519081526020015b60405180910390f35b34801561011657600080fd5b506100f76102ef565b34801561012b57600080fd5b506100f761030f565b34801561014057600080fd5b50610149610330565b005b34801561015757600080fd5b506100f76101663660046109ef565b60016020526000908152604090205481565b34801561018457600080fd5b5061014961064d565b34801561019957600080fd5b506101a2610661565b6040516101019190610a1f565b3480156101bb57600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610101565b3480156101ed57600080fd5b506101c96101fc366004610a6c565b6106c3565b34801561020d57600080fd5b506101a26106ed565b34801561022257600080fd5b50336000908152600160205260409020546100f7565b61014961074d565b34801561024c57600080fd5b5061014961025b3660046109ef565b610826565b34801561026c57600080fd5b506101c961027b366004610a6c565b61089f565b600080805b6002548110156102e95760016000600283815481106102a6576102a6610a85565b60009182526020808320909101546001600160a01b031683528201929092526040019020546102d59083610ab1565b9150806102e181610ac4565b915050610285565b50919050565b60006102f9610280565b61030a9066038d7ea4c68000610add565b905090565b3360009081526001602052604081205461030a9066038d7ea4c68000610add565b6103386108af565b6000610342610280565b1161039f5760405162461bcd60e51b815260206004820152602260248201527f4e6f207469636b6574732068617665206265656e207075726368617365642079604482015261195d60f21b60648201526084015b60405180910390fd5b60006103a9610280565b90506000816103b6610909565b6103c09190610b0a565b90506000808080805b6002548110156104645761041960016000600284815481106103ed576103ed610a85565b60009182526020808320909101546001600160a01b031683528201929092526040019020548690610958565b945085851115610452576002818154811061043657610436610a85565b6000918252602090912001546001600160a01b03169350610464565b8061045c81610ac4565b9150506103c9565b50610470603247610b1e565b905061047c8147610b32565b91506000836001600160a01b03166108fc849081150290604051600060405180830381858888f193505050509050806104f75760405162461bcd60e51b815260206004820152601960248201527f5472616e7366657220746f2077696e6e6572206661696c6564000000000000006044820152606401610396565b600080546040516001600160a01b039091169184156108fc02918591818181858888f1935050505090508061056e5760405162461bcd60e51b815260206004820152601860248201527f5472616e7366657220746f206f776e6572206661696c656400000000000000006044820152606401610396565b604080516001600160a01b0386168152602081018590527f64791dbae5677392ba76761a5273633cec8f1d9d8cfe808da7bac6ef16a880be910160405180910390a16105bc600260006109bd565b50506002805460018082019092557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace018054336001600160a01b0319918216179091556003805492830181556000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b90910180549091166001600160a01b03939093169290921790915550505050565b6106556108af565b61065f600061096d565b565b606060028054806020026020016040519081016040528092919081815260200182805480156106b957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161069b575b5050505050905090565b600381815481106106d357600080fd5b6000918252602090912001546001600160a01b0316905081565b606060038054806020026020016040519081016040528092919081815260200182805480156106b9576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161069b575050505050905090565b600061076066038d7ea4c6800034610b1e565b9050600081116107bd5760405162461bcd60e51b815260206004820152602260248201527f596f75206d7573742073656e64206174206c6561737420302e3030312065746860448201526132b960f11b6064820152608401610396565b33600090815260016020526040812080548392906107dc908490610ab1565b9091555050600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319163317905550565b61082e6108af565b6001600160a01b0381166108935760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610396565b61089c8161096d565b50565b600281815481106106d357600080fd5b6000546001600160a01b0316331461065f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610396565b6000444260028054905061091b610280565b6040805160208101959095528401929092526060830152608082015260a0016040516020818303038152906040528051906020012060001c905090565b60006109648284610ab1565b90505b92915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b508054600082559060005260206000209081019061089c91905b808211156109eb57600081556001016109d7565b5090565b600060208284031215610a0157600080fd5b81356001600160a01b0381168114610a1857600080fd5b9392505050565b6020808252825182820181905260009190848201906040850190845b81811015610a605783516001600160a01b031683529284019291840191600101610a3b565b50909695505050505050565b600060208284031215610a7e57600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561096757610967610a9b565b600060018201610ad657610ad6610a9b565b5060010190565b808202811582820484141761096757610967610a9b565b634e487b7160e01b600052601260045260246000fd5b600082610b1957610b19610af4565b500690565b600082610b2d57610b2d610af4565b500490565b8181038181111561096757610967610a9b56fea26469706673582212204fc56e158f804ea204e9da21476fa4d2d91178b38750c4a858c1b1f15853163c64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100dd5760003560e01c80638da5cb5b1161007f578063e1d10d8511610059578063e1d10d8514610216578063e97dcb6214610238578063f2fde38b14610240578063f71d96cb1461026057600080fd5b80638da5cb5b146101af578063a2fb1175146101e1578063df15c37e1461020157600080fd5b80635d495aea116100bb5780635d495aea146101345780636dcbf2a31461014b578063715018a6146101785780638b5b9ccc1461018d57600080fd5b806306e8337f146100e2578063160a48b91461010a578063289c8cfd1461011f575b600080fd5b3480156100ee57600080fd5b506100f7610280565b6040519081526020015b60405180910390f35b34801561011657600080fd5b506100f76102ef565b34801561012b57600080fd5b506100f761030f565b34801561014057600080fd5b50610149610330565b005b34801561015757600080fd5b506100f76101663660046109ef565b60016020526000908152604090205481565b34801561018457600080fd5b5061014961064d565b34801561019957600080fd5b506101a2610661565b6040516101019190610a1f565b3480156101bb57600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610101565b3480156101ed57600080fd5b506101c96101fc366004610a6c565b6106c3565b34801561020d57600080fd5b506101a26106ed565b34801561022257600080fd5b50336000908152600160205260409020546100f7565b61014961074d565b34801561024c57600080fd5b5061014961025b3660046109ef565b610826565b34801561026c57600080fd5b506101c961027b366004610a6c565b61089f565b600080805b6002548110156102e95760016000600283815481106102a6576102a6610a85565b60009182526020808320909101546001600160a01b031683528201929092526040019020546102d59083610ab1565b9150806102e181610ac4565b915050610285565b50919050565b60006102f9610280565b61030a9066038d7ea4c68000610add565b905090565b3360009081526001602052604081205461030a9066038d7ea4c68000610add565b6103386108af565b6000610342610280565b1161039f5760405162461bcd60e51b815260206004820152602260248201527f4e6f207469636b6574732068617665206265656e207075726368617365642079604482015261195d60f21b60648201526084015b60405180910390fd5b60006103a9610280565b90506000816103b6610909565b6103c09190610b0a565b90506000808080805b6002548110156104645761041960016000600284815481106103ed576103ed610a85565b60009182526020808320909101546001600160a01b031683528201929092526040019020548690610958565b945085851115610452576002818154811061043657610436610a85565b6000918252602090912001546001600160a01b03169350610464565b8061045c81610ac4565b9150506103c9565b50610470603247610b1e565b905061047c8147610b32565b91506000836001600160a01b03166108fc849081150290604051600060405180830381858888f193505050509050806104f75760405162461bcd60e51b815260206004820152601960248201527f5472616e7366657220746f2077696e6e6572206661696c6564000000000000006044820152606401610396565b600080546040516001600160a01b039091169184156108fc02918591818181858888f1935050505090508061056e5760405162461bcd60e51b815260206004820152601860248201527f5472616e7366657220746f206f776e6572206661696c656400000000000000006044820152606401610396565b604080516001600160a01b0386168152602081018590527f64791dbae5677392ba76761a5273633cec8f1d9d8cfe808da7bac6ef16a880be910160405180910390a16105bc600260006109bd565b50506002805460018082019092557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace018054336001600160a01b0319918216179091556003805492830181556000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b90910180549091166001600160a01b03939093169290921790915550505050565b6106556108af565b61065f600061096d565b565b606060028054806020026020016040519081016040528092919081815260200182805480156106b957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161069b575b5050505050905090565b600381815481106106d357600080fd5b6000918252602090912001546001600160a01b0316905081565b606060038054806020026020016040519081016040528092919081815260200182805480156106b9576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161069b575050505050905090565b600061076066038d7ea4c6800034610b1e565b9050600081116107bd5760405162461bcd60e51b815260206004820152602260248201527f596f75206d7573742073656e64206174206c6561737420302e3030312065746860448201526132b960f11b6064820152608401610396565b33600090815260016020526040812080548392906107dc908490610ab1565b9091555050600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319163317905550565b61082e6108af565b6001600160a01b0381166108935760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610396565b61089c8161096d565b50565b600281815481106106d357600080fd5b6000546001600160a01b0316331461065f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610396565b6000444260028054905061091b610280565b6040805160208101959095528401929092526060830152608082015260a0016040516020818303038152906040528051906020012060001c905090565b60006109648284610ab1565b90505b92915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b508054600082559060005260206000209081019061089c91905b808211156109eb57600081556001016109d7565b5090565b600060208284031215610a0157600080fd5b81356001600160a01b0381168114610a1857600080fd5b9392505050565b6020808252825182820181905260009190848201906040850190845b81811015610a605783516001600160a01b031683529284019291840191600101610a3b565b50909695505050505050565b600060208284031215610a7e57600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561096757610967610a9b565b600060018201610ad657610ad6610a9b565b5060010190565b808202811582820484141761096757610967610a9b565b634e487b7160e01b600052601260045260246000fd5b600082610b1957610b19610af4565b500690565b600082610b2d57610b2d610af4565b500490565b8181038181111561096757610967610a9b56fea26469706673582212204fc56e158f804ea204e9da21476fa4d2d91178b38750c4a858c1b1f15853163c64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 459,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "tickets",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 462,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "players",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 465,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "winners",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}